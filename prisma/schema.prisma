// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  assistant
}

model User {
  id           String   @id @default(cuid()) @map("_id")
  clerkId      String   @unique
  email        String   @unique
  name         String?
  avatar       String?
  role         Role     @default(user)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relacionamentos
  clients           Clients[]
  products          Products[]
  categories        Category[]
  brands            Brand[]
  sales             Sales[]
  purchases         Purchases[]
  expenses          Expenses[]
  salesSummary      SalesSummary[]
  purchaseSummary   PurchaseSummary[]
  expenseSummary    ExpenseSummary[]
  expenseByCategory ExpenseByCategory[] // Adicionando o campo para relação inversa
}

model Clients {
  clientId String @map("_clientId") // Relacionamento com o usuário
  id       String @id @default(cuid())
  name     String @unique
  phone    String? // telefone opcional
  Sales    Sales[] // vendas associadas ao cliente

  userId   String
  user     User   @relation(fields: [userId], references: [id]) // Associado ao usuário
}

model Products {
  userId          String @map("_userId") // Relacionamento com o usuário
  productId       String @id @default(cuid())
  name            String
  price           Float
  stockQuantity   Int
  imageProductUrl String?
  dueDate         DateTime
  categoryId      String
  brandId         String
  Sales           Sales[]
  Purchases       Purchases[]

  category        Category @relation(fields: [categoryId], references: [categoryId])
  brand           Brand    @relation(fields: [brandId], references: [brandId])
  user            User     @relation(fields: [userId], references: [id]) // Associado ao usuário
}

model Category {
  userId     String @map("_userId") // Relacionamento com o usuário
  categoryId String @id @default(cuid())
  name       String
  Products   Products[]

  user       User   @relation(fields: [userId], references: [id]) // Associado ao usuário
}

model Brand {
  userId  String @map("_userId") // Relacionamento com o usuário
  brandId String @id @default(cuid())
  name    String
  Products Products[]

  user    User @relation(fields: [userId], references: [id]) // Associado ao usuário
}

model Sales {
  userId      String @map("_userId") // Relacionamento com o usuário
  saleId      String @id @default(cuid())
  productId   String
  clientId    String
  timestamp   DateTime
  quantity    Int
  unitPrice   Float
  totalAmount Float
  product     Products @relation(fields: [productId], references: [productId])
  client      Clients  @relation(fields: [clientId], references: [id])
  user        User     @relation(fields: [userId], references: [id]) // Associado ao usuário
}

model Purchases {
  userId     String @map("_userId") // Relacionamento com o usuário
  purchaseId String @id @default(cuid())
  productId  String
  timestamp  DateTime
  quantity   Int
  unitCost   Float
  totalCost  Float
  product    Products @relation(fields: [productId], references: [productId])
  user       User     @relation(fields: [userId], references: [id]) // Associado ao usuário
}

model Expenses {
  userId    String @map("_userId") // Relacionamento com o usuário
  expenseId String @id @default(cuid())
  category  String
  amount    Float
  timestamp DateTime
  user      User   @relation(fields: [userId], references: [id]) // Associado ao usuário
}

model SalesSummary {
  userId          String @map("_userId") // Relacionamento com o usuário
  salesSummaryId  String @id @default(cuid())
  totalValue      Float
  changePercentage Float?
  date            DateTime
  user            User   @relation(fields: [userId], references: [id]) // Associado ao usuário
}

model PurchaseSummary {
  userId            String @map("_userId") // Relacionamento com o usuário
  purchaseSummaryId String @id @default(cuid())
  totalPurchased    Float
  changePercentage  Float?
  date              DateTime
  user              User   @relation(fields: [userId], references: [id]) // Associado ao usuário
}

model ExpenseSummary {
  userId            String @map("_userId") // Relacionamento com o usuário
  expenseSummaryId  String @id @default(cuid())
  totalExpenses     Float
  date              DateTime
  ExpenseByCategory ExpenseByCategory[]
  user              User   @relation(fields: [userId], references: [id]) // Associado ao usuário
}

model ExpenseByCategory {
  userId             String @map("_userId") // Relacionamento com o usuário
  expenseByCategoryId String @id @default(cuid())
  expenseSummaryId    String
  category            String
  amount              BigInt
  date                DateTime
  expenseSummary      ExpenseSummary @relation(fields: [expenseSummaryId], references: [expenseSummaryId])
  user                User           @relation(fields: [userId], references: [id]) // Associado ao usuário
}
